chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "start_issue_reporting") {
    const confirmScreenshot = confirm("Do you grant permission to take screenshots?");
    
    if (confirmScreenshot) {
      // Initialize an array to store captured screenshots
      const screenshots = [];

      // Listen for screenshot requests
      chrome.tabs.captureVisibleTab(null, {}, (image) => {
        screenshots.push(image);
        const moreScreenshots = confirm("Do you want to capture another screenshot?");
        if (moreScreenshots) {
          chrome.runtime.sendMessage({ action: "capture_another_screenshot" });
        } else {
          triggerGitLabIssueCreation(screenshots);
        }
      });

      sendResponse({ status: "success" });
    } else {
      triggerGitLabIssueCreation([]);
      sendResponse({ status: "no_screenshot" });
    }

    return true;
  }
});

function triggerGitLabIssueCreation(screenshots) {
  const projectId = 'YOUR_PROJECT_ID';
  const privateToken = 'YOUR_PRIVATE_TOKEN';
  
  const bodyContent = {
    title: 'Incident reported via Chrome Extension',
    description: 'Details of the incident...',
  };

  if (screenshots.length > 0) {
    bodyContent.description += `\nScreenshots: ${screenshots.join("\n")}`;
  }

  fetch(`https://gitlab.com/api/v4/projects/${projectId}/issues`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'PRIVATE-TOKEN': privateToken,
    },
    body: JSON.stringify(bodyContent),
  })
  .then(response => response.json())
  .then(data => {
    console.log('GitLab issue created:', data);
  })
  .catch(error => {
    console.error('Error creating GitLab issue:', error);
  });
}
