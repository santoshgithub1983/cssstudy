function triggerGitLabIssueCreation(screenshots) {
  const projectId = 'YOUR_PROJECT_ID';
  const privateToken = 'YOUR_PRIVATE_TOKEN';

  // Fetch network logs from chrome storage
  chrome.storage.local.get({ networkLogs: [] }, function (result) {
    const logs = result.networkLogs;
    let logContent = 'Network Error Logs:\n\n';

    logs.forEach((log, index) => {
      logContent += `Error ${index + 1}:\nURL: ${log.url}\nError: ${log.error}\nTimestamp: ${new Date(log.timeStamp).toLocaleString()}\n\n`;
    });

    const logBlob = new Blob([logContent], { type: 'text/plain' });
    const reader = new FileReader();

    reader.onloadend = function () {
      const base64Log = reader.result.split(',')[1]; // Get the base64 part

      // Step 1: Upload the log file
      const logFormData = new FormData();
      logFormData.append('file', logBlob, 'network-logs.txt');

      fetch(`https://gitlab.com/api/v4/projects/${projectId}/uploads`, {
        method: 'POST',
        headers: {
          'PRIVATE-TOKEN': privateToken,
        },
        body: logFormData,
      })
      .then(response => response.json())
      .then(uploadData => {
        console.log('Log file uploaded:', uploadData);

        // Step 2: Upload each screenshot
        const uploadScreenshotPromises = screenshots.map((screenshot, index) => {
          const screenshotBlob = b64toBlob(screenshot, 'image/png');
          const screenshotFormData = new FormData();
          screenshotFormData.append('file', screenshotBlob, `screenshot-${index + 1}.png`);

          return fetch(`https://gitlab.com/api/v4/projects/${projectId}/uploads`, {
            method: 'POST',
            headers: {
              'PRIVATE-TOKEN': privateToken,
            },
            body: screenshotFormData,
          })
          .then(response => response.json());
        });

        // Wait for all screenshots to upload
        Promise.all(uploadScreenshotPromises)
          .then(screenshotUploadData => {
            console.log('Screenshots uploaded:', screenshotUploadData);

            // Step 3: Create the issue with links to the uploaded files
            let description = 'Details of the incident...';
            
            // Add screenshots to the issue description
            if (screenshotUploadData.length > 0) {
              description += '\n\nScreenshots:\n';
              screenshotUploadData.forEach((data, index) => {
                description += `![Screenshot ${index + 1}](${data.url})\n`;
              });
            }

            // Add log file link to the issue description
            description += `\n\nNetwork logs attached: ${uploadData.markdown}`;

            fetch(`https://gitlab.com/api/v4/projects/${projectId}/issues`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'PRIVATE-TOKEN': privateToken,
              },
              body: JSON.stringify({
                title: 'Incident reported via Chrome Extension',
                description: description,
              }),
            })
            .then(response => response.json())
            .then(data => {
              console.log('GitLab issue created:', data);

              // Step 4: Clear the stored logs after issue creation
              chrome.storage.local.set({ networkLogs: [] });
            })
            .catch(error => {
              console.error('Error creating GitLab issue:', error);
            });
          })
          .catch(error => {
            console.error('Error uploading screenshots:', error);
          });
      })
      .catch(error => {
        console.error('Error uploading log file:', error);
      });
    };

    reader.readAsDataURL(logBlob);
  });
}

// Helper function to convert base64 to Blob
function b64toBlob(base64, contentType) {
  const byteCharacters = atob(base64);
  const byteArrays = [];

  for (let offset = 0; offset < byteCharacters.length; offset += 512) {
    const slice = byteCharacters.slice(offset, offset + 512);

    const byteNumbers = new Array(slice.length);
    for (let i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    const byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }

  return new Blob(byteArrays, { type: contentType });
}
