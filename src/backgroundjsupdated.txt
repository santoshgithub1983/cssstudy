function triggerGitLabIssueCreation(screenshots) {
  const projectId = 'YOUR_PROJECT_ID';
  const privateToken = 'YOUR_PRIVATE_TOKEN';

  // Fetch network logs from chrome storage
  chrome.storage.local.get({ networkLogs: [] }, function (result) {
    const logs = result.networkLogs;
    let logContent = 'Network Error Logs:\n\n';

    logs.forEach((log, index) => {
      logContent += `Error ${index + 1}:\nURL: ${log.url}\nError: ${log.error}\nTimestamp: ${new Date(log.timeStamp).toLocaleString()}\n\n`;
    });

    const logBlob = new Blob([logContent], { type: 'text/plain' });
    const reader = new FileReader();

    reader.onloadend = function () {
      const base64Log = reader.result.split(',')[1]; // Get the base64 part

      // Step 1: Upload the log file
      const formData = new FormData();
      formData.append('file', logBlob, 'network-logs.txt');

      fetch(`https://gitlab.com/api/v4/projects/${projectId}/uploads`, {
        method: 'POST',
        headers: {
          'PRIVATE-TOKEN': privateToken,
        },
        body: formData,
      })
      .then(response => response.json())
      .then(uploadData => {
        console.log('File uploaded:', uploadData);

        // Step 2: Create the issue with screenshots and link to the uploaded logs
        let description = 'Details of the incident...';

        if (screenshots.length > 0) {
          description += '\n\nScreenshots:\n';
          screenshots.forEach((image, index) => {
            description += `![Screenshot ${index + 1}](data:image/png;base64,${image})\n`;
          });
        }

        description += `\n\nNetwork logs attached: ${uploadData.markdown}`;

        fetch(`https://gitlab.com/api/v4/projects/${projectId}/issues`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'PRIVATE-TOKEN': privateToken,
          },
          body: JSON.stringify({
            title: 'Incident reported via Chrome Extension',
            description: description,
          }),
        })
        .then(response => response.json())
        .then(data => {
          console.log('GitLab issue created:', data);

          // Step 3: Clear the stored logs after issue creation
          chrome.storage.local.set({ networkLogs: [] });
        })
        .catch(error => {
          console.error('Error creating GitLab issue:', error);
        });
      })
      .catch(error => {
        console.error('Error uploading log file:', error);
      });
    };

    reader.readAsDataURL(logBlob);
  });
}
